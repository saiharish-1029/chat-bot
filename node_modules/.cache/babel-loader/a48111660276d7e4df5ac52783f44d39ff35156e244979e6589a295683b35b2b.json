{"ast":null,"code":"var _jsxFileName = \"/workspace/chat-bot/src/recorder/index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport Loader from \"react-js-loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet chunks = [];\nfunction Index({\n  addMessage,\n  apiUrl\n}) {\n  _s();\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [mediaRecorderStatus, setMediaRecorderStatus] = useState(false);\n  const [mediaRecordingStatus, setMediaRecordingStatus] = useState(false);\n  const [loading, setLoading] = useState(false);\n  // const [audioS, setAudio] = useState(null)\n  useEffect(() => {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        const mediaRecorderS = new MediaRecorder(stream);\n        console.log(mediaRecorderS);\n        setMediaRecorder(mediaRecorderS);\n        setMediaRecorderStatus(true);\n      }).catch(error => console.log(error));\n    } else {\n      alert(\"cannot record the audio on this device\");\n    }\n  }, []);\n  const onStopRecording = () => {\n    setLoading(true);\n    mediaRecorder.stop();\n    setMediaRecordingStatus(false);\n    console.log(mediaRecorder.state);\n    // mediaRecorder.ondataavailable = (e) => {\n    console.log(\"recorder stopped\");\n    mediaRecorder.ondataavailable = e => {\n      console.log(\"media storing data\", e);\n      const blob = new Blob([e.data], {\n        type: \"audio/mpeg\"\n      });\n      console.log(blob);\n      const formData = new FormData();\n      formData.append(\"audio\", blob, \"recording.mp3\");\n      sendToBackend(formData);\n      // const audioURL = window.URL.createObjectURL(blob);\n      // setAudio(audioURL)\n    };\n    // }\n  };\n  const replayPlayer = audioData => {\n    function hexToBytes(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2) bytes.push(parseInt(hex.substr(c, 2), 16));\n      return new Uint8Array(bytes);\n    }\n    function hexToBinary(hex) {\n      return new Uint8Array(hex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n    }\n    var hexValues = audioData.split(\" \"); // Your hexadecimal audio data\n    const audioBufferBytes = new Uint8Array(hexValues.map(hex => parseInt(hex, 16)));\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const audioSource = audioContext.createBufferSource();\n    audioContext.decodeAudioData(audioBufferBytes.buffer, audioBuffer => {\n      // Set the decoded audio data as the buffer\n      audioSource.buffer = audioBuffer;\n\n      // Connect the AudioBufferSourceNode to the AudioContext's destination (e.g., speakers)\n      audioSource.connect(audioContext.destination);\n\n      // Start playing the audio\n      audioSource.start();\n    }, error => {\n      console.error(\"Error decoding audio:\", error);\n    });\n  };\n  const sendToBackend = data => {\n    console.log(\"Sending to Backend\");\n    axios.post(\"https://voicebot-service.antiers.world/process_audio\", data).then(response => {\n      // localStorage.setItem(\"audio\", response.data.audio_response_buffer);\n      console.log(response);\n      // setMyAudioSrc(response.data.audio_response_buffer);\n      replayPlayer(response.data.audio_response_buffer);\n      addMessage(\"bot\", response.data.text_response, \"text\");\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error sending audio to backend:\", error);\n      setLoading(false);\n    });\n  };\n  if (!mediaRecorderStatus) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"not\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 38\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"promo-video\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"send-button\",\n        disabled: loading,\n        onMouseDown: () => {\n          setMediaRecordingStatus(true);\n          mediaRecorder === null || mediaRecorder === void 0 ? void 0 : mediaRecorder.start();\n          console.log(mediaRecorder.state);\n        },\n        onMouseUp: () => onStopRecording(),\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\",\n          children: /*#__PURE__*/_jsxDEV(Loader, {\n            type: \"spinner-circle\",\n            bgColor: \"white\",\n            color: \"white\",\n            size: 35\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 67\n        }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), mediaRecordingStatus ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"waves wave-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"waves wave-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"waves wave-3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(Index, \"RgT8K5lwlHNqUE/vQh9cL1/JTi8=\");\n_c = Index;\nexport default Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"names":["React","useEffect","useState","axios","Loader","jsxDEV","_jsxDEV","chunks","Index","addMessage","apiUrl","_s","mediaRecorder","setMediaRecorder","mediaRecorderStatus","setMediaRecorderStatus","mediaRecordingStatus","setMediaRecordingStatus","loading","setLoading","navigator","mediaDevices","getUserMedia","audio","then","stream","mediaRecorderS","MediaRecorder","console","log","catch","error","alert","onStopRecording","stop","state","ondataavailable","e","blob","Blob","data","type","formData","FormData","append","sendToBackend","replayPlayer","audioData","hexToBytes","hex","bytes","c","length","push","parseInt","substr","Uint8Array","hexToBinary","match","map","byte","hexValues","split","audioBufferBytes","audioContext","window","AudioContext","webkitAudioContext","audioSource","createBufferSource","decodeAudioData","buffer","audioBuffer","connect","destination","start","post","response","audio_response_buffer","text_response","children","fileName","_jsxFileName","lineNumber","columnNumber","className","disabled","onMouseDown","onMouseUp","bgColor","color","size","_c","$RefreshReg$"],"sources":["/workspace/chat-bot/src/recorder/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from \"axios\"\nimport Loader from \"react-js-loader\"\n\nlet chunks = [];\nfunction Index({ addMessage,apiUrl }) {\n    const [mediaRecorder, setMediaRecorder] = useState(null)\n    const [mediaRecorderStatus, setMediaRecorderStatus] = useState(false)\n    const [mediaRecordingStatus, setMediaRecordingStatus] = useState(false)\n    const [loading, setLoading] = useState(false)\n    // const [audioS, setAudio] = useState(null)\n    useEffect(() => {\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n                const mediaRecorderS = new MediaRecorder(stream);\n                console.log(mediaRecorderS)\n                setMediaRecorder(mediaRecorderS)\n                setMediaRecorderStatus(true)\n            }).catch((error) => console.log(error))\n        } else {\n            alert(\"cannot record the audio on this device\")\n        }\n    }, [])\n\n    const onStopRecording = () => {\n        setLoading(true)\n        mediaRecorder.stop();\n        setMediaRecordingStatus(false)\n        console.log(mediaRecorder.state);\n        // mediaRecorder.ondataavailable = (e) => {\n        console.log(\"recorder stopped\");\n        mediaRecorder.ondataavailable = (e) => {\n            console.log(\"media storing data\", e)\n            const blob = new Blob([e.data], { type: \"audio/mpeg\" });\n            console.log(blob)\n            const formData = new FormData()\n            formData.append(\"audio\", blob, \"recording.mp3\")\n            sendToBackend(formData)\n            // const audioURL = window.URL.createObjectURL(blob);\n            // setAudio(audioURL)\n        };\n        // }\n    }\n\n    const replayPlayer = (audioData) => {\n        function hexToBytes(hex) {\n            for (var bytes = [], c = 0; c < hex.length; c += 2)\n                bytes.push(parseInt(hex.substr(c, 2), 16));\n            return new Uint8Array(bytes);\n        }\n        function hexToBinary(hex) {\n            return new Uint8Array(hex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n        }\n        var hexValues = audioData.split(\" \"); // Your hexadecimal audio data\n        const audioBufferBytes = new Uint8Array(hexValues.map(hex => parseInt(hex, 16)));\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        const audioSource = audioContext.createBufferSource();\n        audioContext.decodeAudioData(audioBufferBytes.buffer, (audioBuffer) => {\n            // Set the decoded audio data as the buffer\n            audioSource.buffer = audioBuffer;\n\n            // Connect the AudioBufferSourceNode to the AudioContext's destination (e.g., speakers)\n            audioSource.connect(audioContext.destination);\n\n            // Start playing the audio\n            audioSource.start();\n        }, (error) => {\n            console.error(\"Error decoding audio:\", error);\n        });\n    }\n\n    const sendToBackend = (data) => {\n        console.log(\"Sending to Backend\")\n        axios\n            .post(\"https://voicebot-service.antiers.world/process_audio\", data)\n            .then((response) => {\n                // localStorage.setItem(\"audio\", response.data.audio_response_buffer);\n                console.log(response)\n                // setMyAudioSrc(response.data.audio_response_buffer);\n                replayPlayer(response.data.audio_response_buffer)\n                addMessage(\"bot\", response.data.text_response, \"text\")\n                setLoading(false)\n            })\n            .catch((error) => {\n                console.error(\"Error sending audio to backend:\", error);\n                setLoading(false)\n            });\n    }\n\n    if (!mediaRecorderStatus) return <div>not</div>\n\n    return (\n        <div className=\"promo-video\">\n            <div>\n                <button type=\"button\" className=\"send-button\" disabled={loading} onMouseDown={() => {\n                    setMediaRecordingStatus(true)\n                    mediaRecorder?.start()\n                    console.log(mediaRecorder.state);\n                }} onMouseUp={() => onStopRecording()}>{loading ? <div className='loader'>\n                    <Loader type=\"spinner-circle\" bgColor={\"white\"} color={\"white\"} size={35} />\n                </div> : <i className=\"fas fa-microphone\"></i>}</button>\n                {mediaRecordingStatus ? <div>\n                    <div className=\"waves wave-1\" />\n                    <div className=\"waves wave-2\" />\n                    <div className=\"waves wave-3\" />\n                </div> : <div className='none' />}\n            </div>\n        </div>\n    )\n}\n\nexport default Index\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,IAAIC,MAAM,GAAG,EAAE;AACf,SAASC,KAAKA,CAAC;EAAEC,UAAU;EAACC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACY,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACc,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C;EACAD,SAAS,CAAC,MAAM;IACZ,IAAImB,SAAS,CAACC,YAAY,IAAID,SAAS,CAACC,YAAY,CAACC,YAAY,EAAE;MAC/DF,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,CAACC,IAAI,CAACC,MAAM,IAAI;QAChE,MAAMC,cAAc,GAAG,IAAIC,aAAa,CAACF,MAAM,CAAC;QAChDG,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;QAC3Bb,gBAAgB,CAACa,cAAc,CAAC;QAChCX,sBAAsB,CAAC,IAAI,CAAC;MAChC,CAAC,CAAC,CAACe,KAAK,CAAEC,KAAK,IAAKH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC,CAAC;IAC3C,CAAC,MAAM;MACHC,KAAK,CAAC,wCAAwC,CAAC;IACnD;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1Bd,UAAU,CAAC,IAAI,CAAC;IAChBP,aAAa,CAACsB,IAAI,CAAC,CAAC;IACpBjB,uBAAuB,CAAC,KAAK,CAAC;IAC9BW,OAAO,CAACC,GAAG,CAACjB,aAAa,CAACuB,KAAK,CAAC;IAChC;IACAP,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAC/BjB,aAAa,CAACwB,eAAe,GAAIC,CAAC,IAAK;MACnCT,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEQ,CAAC,CAAC;MACpC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,CAAC,CAACG,IAAI,CAAC,EAAE;QAAEC,IAAI,EAAE;MAAa,CAAC,CAAC;MACvDb,OAAO,CAACC,GAAG,CAACS,IAAI,CAAC;MACjB,MAAMI,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,IAAI,EAAE,eAAe,CAAC;MAC/CO,aAAa,CAACH,QAAQ,CAAC;MACvB;MACA;IACJ,CAAC;IACD;EACJ,CAAC;EAED,MAAMI,YAAY,GAAIC,SAAS,IAAK;IAChC,SAASC,UAAUA,CAACC,GAAG,EAAE;MACrB,KAAK,IAAIC,KAAK,GAAG,EAAE,EAAEC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAC9CD,KAAK,CAACG,IAAI,CAACC,QAAQ,CAACL,GAAG,CAACM,MAAM,CAACJ,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MAC9C,OAAO,IAAIK,UAAU,CAACN,KAAK,CAAC;IAChC;IACA,SAASO,WAAWA,CAACR,GAAG,EAAE;MACtB,OAAO,IAAIO,UAAU,CAACP,GAAG,CAACS,KAAK,CAAC,SAAS,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIN,QAAQ,CAACM,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/E;IACA,IAAIC,SAAS,GAAGd,SAAS,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,MAAMC,gBAAgB,GAAG,IAAIP,UAAU,CAACK,SAAS,CAACF,GAAG,CAACV,GAAG,IAAIK,QAAQ,CAACL,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAChF,MAAMe,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;IAC7E,MAAMC,WAAW,GAAGJ,YAAY,CAACK,kBAAkB,CAAC,CAAC;IACrDL,YAAY,CAACM,eAAe,CAACP,gBAAgB,CAACQ,MAAM,EAAGC,WAAW,IAAK;MACnE;MACAJ,WAAW,CAACG,MAAM,GAAGC,WAAW;;MAEhC;MACAJ,WAAW,CAACK,OAAO,CAACT,YAAY,CAACU,WAAW,CAAC;;MAE7C;MACAN,WAAW,CAACO,KAAK,CAAC,CAAC;IACvB,CAAC,EAAG5C,KAAK,IAAK;MACVH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD,CAAC,CAAC;EACN,CAAC;EAED,MAAMc,aAAa,GAAIL,IAAI,IAAK;IAC5BZ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC1B,KAAK,CACAyE,IAAI,CAAC,sDAAsD,EAAEpC,IAAI,CAAC,CAClEhB,IAAI,CAAEqD,QAAQ,IAAK;MAChB;MACAjD,OAAO,CAACC,GAAG,CAACgD,QAAQ,CAAC;MACrB;MACA/B,YAAY,CAAC+B,QAAQ,CAACrC,IAAI,CAACsC,qBAAqB,CAAC;MACjDrE,UAAU,CAAC,KAAK,EAAEoE,QAAQ,CAACrC,IAAI,CAACuC,aAAa,EAAE,MAAM,CAAC;MACtD5D,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDW,KAAK,CAAEC,KAAK,IAAK;MACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDZ,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACV,CAAC;EAED,IAAI,CAACL,mBAAmB,EAAE,oBAAOR,OAAA;IAAA0E,QAAA,EAAK;EAAG;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE/C,oBACI9E,OAAA;IAAK+E,SAAS,EAAC,aAAa;IAAAL,QAAA,eACxB1E,OAAA;MAAA0E,QAAA,gBACI1E,OAAA;QAAQmC,IAAI,EAAC,QAAQ;QAAC4C,SAAS,EAAC,aAAa;QAACC,QAAQ,EAAEpE,OAAQ;QAACqE,WAAW,EAAEA,CAAA,KAAM;UAChFtE,uBAAuB,CAAC,IAAI,CAAC;UAC7BL,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE+D,KAAK,CAAC,CAAC;UACtB/C,OAAO,CAACC,GAAG,CAACjB,aAAa,CAACuB,KAAK,CAAC;QACpC,CAAE;QAACqD,SAAS,EAAEA,CAAA,KAAMvD,eAAe,CAAC,CAAE;QAAA+C,QAAA,EAAE9D,OAAO,gBAAGZ,OAAA;UAAK+E,SAAS,EAAC,QAAQ;UAAAL,QAAA,eACrE1E,OAAA,CAACF,MAAM;YAACqC,IAAI,EAAC,gBAAgB;YAACgD,OAAO,EAAE,OAAQ;YAACC,KAAK,EAAE,OAAQ;YAACC,IAAI,EAAE;UAAG;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3E,CAAC,gBAAG9E,OAAA;UAAG+E,SAAS,EAAC;QAAmB;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,EACvDpE,oBAAoB,gBAAGV,OAAA;QAAA0E,QAAA,gBACpB1E,OAAA;UAAK+E,SAAS,EAAC;QAAc;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChC9E,OAAA;UAAK+E,SAAS,EAAC;QAAc;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChC9E,OAAA;UAAK+E,SAAS,EAAC;QAAc;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,gBAAG9E,OAAA;QAAK+E,SAAS,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACzE,EAAA,CAxGQH,KAAK;AAAAoF,EAAA,GAALpF,KAAK;AA0Gd,eAAeA,KAAK;AAAA,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}